/*
 * Generator.h
 *
 *  Created on: Jul 8, 2016
 *      Author: mad
 */

#ifndef INCLUDE_CPP_GENERATOR_H_
#define INCLUDE_CPP_GENERATOR_H_

#include "../Backend.h"


#define TYPE_TREE(source) \
	Void* p_void = dynamic_cast<Void*>(source); \
	Primitive* p_primitive = dynamic_cast<Primitive*>(source); \
	Bool* p_bool = dynamic_cast<Bool*>(source); \
	Integer* p_int = dynamic_cast<Integer*>(source); \
	Real* p_real = dynamic_cast<Real*>(source); \
	Array* p_array = dynamic_cast<Array*>(source); \
	Enum* p_enum = dynamic_cast<Enum*>(source); \
	Struct* p_struct = dynamic_cast<Struct*>(source); \
	Class* p_class = dynamic_cast<Class*>(source); \
	Interface* p_iface = dynamic_cast<Interface*>(source); \
	Object* p_object = dynamic_cast<Object*>(source); \
	Node* p_node = dynamic_cast<Node*>(source);


namespace vni {
namespace codegen {
namespace cpp {

class Generator : public Backend {
public:
	virtual void generate(Type* type) {
		Interface* p_iface = dynamic_cast<Interface*>(type);
		
		// generate header
		out.str("");
		generate_header(type);
		string header_dir = "include/" + subs(type->package->name, ".", "/") + "/";
		update(header_dir, type->name + (p_iface ? "Base" : "") + ".hxx", out.str());
		
		// generate source
		out.str("");
		generate_source(type);
		string source_dir = "src/";
		string source_name = type->package->name + "." + type->name;
		if(p_iface) {
			source_dir = header_dir;
			source_name = type->name + ".hxx";
		} else {
			source_name += ".cxx";
		}
		update(source_dir, source_name, out.str());
	}
	
	static string full(string name) {
		return subs(name, ".", "::");
	}
	
	static string full(Base* type) {
		return subs(type->get_full_name(), ".", "::");
	}
	
	static string hash_of(Base* type) {
		char buf[64];
		int len = snprintf(buf, 64, "0x%x", (uint32_t)type->get_hash());
		return string(buf, len);
	}
	
	static string hash_of(string str) {
		char buf[64];
		int len = snprintf(buf, 64, "0x%x", (uint32_t)hash64(str));
		return string(buf, len);
	}
	
	void namespace_begin() {
		for(string space : name_space) {
			out << "namespace " << space << " {" << endl;
		}
	}
	
	void namespace_end() {
		for(string space : name_space) {
			out << "} // namespace" << endl;
		}
	}
	
	void echo_type(Base* type) {
		TYPE_TREE(type);
		if(p_object) {
			out << full(type) << "Base::Client";
		} else if(p_iface) {
			out << full(type);
		} else if(p_struct) {
			out << full(type);
		} else if(p_enum) {
			out << "uint32_t";
		} else if(p_array) {
			out << "vnl::Vector<";
			echo_type(p_array->type);
			out << ", " << p_array->size << ">";
		} else if(p_bool) {
			out << "bool";
		} else if(p_int) {
			switch(p_int->size) {
				case 1: out << "int8_t"; break;
				case 2: out << "int16_t"; break;
				case 4: out << "int32_t"; break;
				case 8: out << "int64_t"; break;
				default: out << "?"; break;
			}
		} else if(p_real) {
			switch(p_real->size) {
				case 4: out << "float"; break;
				case 8: out << "double"; break;
				default: out << "?"; break;
			}
		} else if(p_void) {
			out << "void";
		}
	}
	
	void echo_tmpl(vector<Base*>& params) {
		if(params.size()) {
			out << "<";
			for(int i = 0; i < params.size(); ++i) {
				out << full(params[i]);
				if(i < params.size()-1) {
					out << ", ";
				}
			}
			out << " >";
		}
	}
	
	void echo_field(Field* field, bool def, bool init) {
		TYPE_TREE(field->type);
		if(def) {
			echo_type(field->type);
			echo_tmpl(field->tmpl_types);
			out << " ";
		}
		out << field->name;
		if(init) {
			if(!field->value.empty()) {
				out << " = " << field->value;
			} else if(p_primitive) {
				out << " = 0";
			}
		}
		out << ";" << endl;
	}
	
	void generate_header(Type* p_type) {
		TYPE_TREE(p_type);
		type_name = p_type->name;
		base_name = p_type->name;
		if(p_iface) {
			base_name += "Base";
		}
		
		string guard_sym = "INCLUDE_VNI_GENERATED_" + subs(p_type->package->name, ".", "_") + "_" + base_name + "_HXX_";
		out << endl << "#ifndef " << guard_sym << endl;
		out << "#define " << guard_sym << endl << endl;
		out << "// AUTO GENERATED by virtual-network-interface codegen" << endl << endl;
		
		string super;
		is_base = false;
		if(p_class && p_class->super) {
			super = p_class->super->get_full_name();
		} else if(p_node && p_type->name != "Node") {
			super = "vni.Node";
		} else if(p_object && p_type->name != "Object") {
			super = "vni.Object";
		} else if(p_iface && p_type->name != "Interface") {
			super = "vni.Interface";
		} else if(p_struct && p_type->name != "Value") {
			super = "vni.Value";
		} else if(p_enum) {
			super = "";
		} else {
			super = "vni.Type";
			is_base = true;
		}
		p_type->imports.insert(super);
		for(string import : p_type->imports) {
			out << "#include <" << subs(import, ".", "/") << ".hxx>" << endl;
		}
		out << endl;
		
		name_space = split(p_type->package->name, '.');
		namespace_begin();
		out << endl;
		
		if(p_iface) {
			string template_str;
			if(p_iface->generic.size()) {
				template_str = "template<";
				for(int i = 0; i < p_iface->generic.size(); ++i) {
					template_str += "class " + p_iface->generic[i];
					if(i < p_iface->generic.size()-1) {
						template_str += ", ";
					}
				}
				template_str += ">";
			}
			out << template_str << endl;
		}
		if(p_struct || p_iface) {
			out << "class " << base_name << " : public " << subs(super, ".", "::") << " {" << endl;
			out << "public:@" << endl;
			out << "static const uint32_t VNI_HASH = " << hash_of(p_type) << ";" << endl;
			out << "static const char* VNI_NAME = \"" << p_type->get_full_name() << "\";" << endl;
			if(p_struct) {
				out << "static const uint32_t NUM_FIELDS = " << p_struct->all_fields.size() << ";" << endl;
			}
			if(p_object) {
				out << "static const uint32_t NUM_FIELDS = " << p_object->all_fields.size() << ";" << endl;
			}
			out << endl;
			
			vector<Field*> constants;
			if(p_struct) {
				constants = p_struct->constants;
			} else if(p_object) {
				constants = p_object->constants;
			}
			for(Field* field : constants) {
				out << "static const ";
				echo_type(field->type);
				out << " " << field->name << " = " << field->value << ";" << endl;
			}
			out << endl;
			
			vector<Field*> fields;
			if(p_struct) {
				fields = p_struct->fields;
			} else if(p_object) {
				fields = p_object->fields;
			}
			for(Field* field : fields) {
				echo_type(field->type);
				echo_tmpl(field->tmpl_types);
				out << " " << field->name << ";" << endl;
			}
			
			out << endl;
			if(p_object) {
				out << base_name << "(const vnl::String& domain_, const vnl::String& topic_)" << endl;
				out << "\t:\t" << subs(super, ".", "::") << "(domain_, topic_)" << endl << "{@" << endl;
			} else {
				out << base_name << "() {@" << endl;
			}
			for(Field* field : fields) {
				if(!field->value.empty()) {
					out << field->name << " = " << field->value << ";" << endl;
				} else if(dynamic_cast<Primitive*>(field->type)) {
					out << field->name << " = 0;" << endl;
				}
			}
			out << "$}" << endl << endl;
		}
		
		if(p_struct) {
			out << "static " << type_name << "* create();" << endl;
			out << "virtual " << type_name << "* clone() const;" << endl;
			out << "virtual void destroy();" << endl << endl;
			out << "virtual void serialize(vnl::io::TypeOutput& out_) const;" << endl;
			out << "virtual void deserialize(vnl::io::TypeInput& in_, int size_);" << endl << endl;
		}
		if(p_struct || p_iface) {
			out << "virtual uint32_t vni_hash() const { return VNI_HASH; }" << endl;
			out << "virtual const char* type_name() const { return VNI_NAME; }" << endl << endl;
		}
		if(p_struct) {
			out << "virtual int type_size() const { return sizeof(" << type_name << "); }" << endl;
		}
		if(p_struct || p_object) {
			out << "virtual int num_fields() const { return NUM_FIELDS; }" << endl;
			out << "virtual int field_index(vnl::Hash32 hash_) const;" << endl;
			out << "virtual const char* field_name(int index_) const;" << endl;
			out << "virtual void get_field(int index_, vnl::String& str_) const;" << endl;
			out << "virtual void set_field(int index_, vnl::io::ByteInput& in_);" << endl << endl;
		}
		
		if(p_iface) {
			out << "$protected:@" << endl;
			for(Method* method : p_iface->methods) {
				out << "virtual ";
				echo_type(method->type);
				echo_tmpl(method->tmpl_types);
				out << " " << method->name << "(";
				for(int i = 0; i < method->params.size(); ++i) {
					Field* param = method->params[i];
					echo_type(param->type);
					echo_tmpl(param->tmpl_types);
					out << " " << param->name;
					if(i < method->params.size()-1) {
						out << ", ";
					}
				}
				out << ") " << (method->is_const ? "const " : "") << "= 0;" << endl;
			}
			out << endl;
			out << "virtual bool vni_call(vnl::io::TypeInput& in_, uint32_t hash_, int num_args_);" << endl;
			out << "virtual bool vni_const_call(vnl::io::TypeInput& in_, uint32_t hash_, int num_args_, vnl::io::TypeOutput& out_);" << endl;
		}
		
		if(p_enum) {
			out << "struct " << type_name << " {@" << endl << endl;
			for(string& value : p_enum->values) {
				out << "static const uint32_t " << value << " = " << hash_of(value) << ";" << endl;
			}
		}
		
		out << endl << "$};" << endl << endl;
		
		if(p_object) {
			out << endl;
			generate_client(p_object);
			out << endl;
		}
		
		namespace_end();
		out << endl << "#endif // " << guard_sym;
	}
	
	void generate_writer(Interface* p_iface) {
		Object* p_object = dynamic_cast<Object*>(p_iface);
		
		
	}
	
	void generate_client(Object* p_object) {
		
	}
	
	void generate_source(Type* p_type) {
		TYPE_TREE(p_type);
		string guard_sym = "INCLUDE_VNI_GENERATED_" + subs(p_type->get_full_name(), ".", "_") + "_HXX_";
		if(p_iface) {
			out << endl << "#ifndef " << guard_sym << endl;
			out << "#define " << guard_sym << endl;
		}
		out << endl << "// AUTO GENERATED by virtual-network-interface codegen" << endl;
		out << endl << "#include <" << subs(p_type->get_full_name(), ".", "/") << (p_iface ? ".h" : ".hxx") << ">" << endl;
		
		vector<Struct*> sub_classes;
		if(is_base) {
			for(auto entry : INDEX) {
				Struct* p_struct = dynamic_cast<Struct*>(entry.second);
				if(p_struct && !dynamic_cast<Interface*>(entry.second)) {
					out << "#include <" << subs(p_struct->get_full_name(), ".", "/") << ".hxx>" << endl;
					sub_classes.push_back(p_struct);
				}
			}
		}
		
		out << endl;
		namespace_begin();
		out << endl;
		
		if(is_base) {
			out << "vni::Value* create(vnl::Hash32 hash) {@" << endl;
			out << "switch(hash) {@" << endl;
			for(Struct* sub : sub_classes) {
				out << "case " << hash_of(sub) << ": return vni::create<" << full(sub) << ">();" << endl;
			}
			out << "default: return 0;" << endl;
			out << "$}" << endl << "$}" << endl << endl;
		}
		
		string scope = base_name + "::";
		if(p_struct) {
			out << type_name << "* " << scope << "create() {@" << endl;
			out << "return vni::create<" << type_name << ">();" << endl << "$}" << endl << endl;
			out << type_name << "* " << scope << "clone() const {@" << endl;
			out << "return vni::create<" << type_name << ">(*this);" << endl << "$}" << endl << endl;
			out << "void " << scope << "destroy() {@" << endl;
			out << "return vni::Pool<" << type_name << ">::destroy(this);" << endl << "$}" << endl << endl;
		}
		
		vector<Field*> all_fields;
		if(p_struct) {
			all_fields = p_struct->all_fields;
		} else if(p_object) {
			all_fields = p_object->all_fields;
		}
		if(p_struct) {
			out << "void " << scope << "serialize(vnl::io::TypeOutput& out_) const {@" << endl;
			if(p_class) {
				out << "out_.putEntry(VNL_IO_CLASS, NUM_FIELDS);" << endl;
				out << "out_.putHash(VNI_HASH);" << endl;
			} else {
				out << "out_.putEntry(VNL_IO_STRUCT, NUM_FIELDS);" << endl;
			}
			for(Field* field : all_fields) {
				out << "out_.putHash(" << hash_of(field->name) << "); ";
				out << "vni::write(out_, " << field->name << ");" << endl;
			}
			out << "$}" << endl << endl;
			
			out << "void " << scope << "deserialize(vnl::io::TypeInput& in_, int size_) {@" << endl;
			out << "for(int i = 0; i < size_ && !in_.error(); ++i) {@" << endl;
			out << "uint32_t hash_ = 0;" << endl << "in_.getHash(hash_);" << endl;
			out << "switch(hash_) {@" << endl;
			for(Field* field : all_fields) {
				out << "case " << hash_of(field->name) << ": vni::read(in_, " << field->name << "); break;" << endl;
			}
			out << "default: in_.skip();" << endl;
			out << "$}" << endl << "$}" << endl << "$}" << endl << endl;
		}
		
		if(p_struct || p_object) {
			out << "int " << scope << "field_index(vnl::Hash32 hash_) const {@" << endl;
			out << "switch((uint32_t)hash_) {@" << endl;
			int index = 0;
			for(Field* field : all_fields) {
				out << "case " << hash_of(field->name) << ": return " << index++ << ";" << endl;
			}
			out << "default: return -1;" << endl;
			out << "$}" << endl << "$}" << endl << endl;
			
			out << "const char* " << scope << "field_name(int index_) const {@" << endl;
			out << "switch(index_) {@" << endl;
			index = 0;
			for(Field* field : all_fields) {
				out << "case " << index++ << ": return \"" << field->name << "\";" << endl;
			}
			out << "default: return \"?\";" << endl;
			out << "$}" << endl << "$}" << endl << endl;
			
			out << "void " << scope << "get_field(int index_, vnl::String& str_) const {@" << endl;
			out << "switch(index_) {@" << endl;
			index = 0;
			for(Field* field : all_fields) {
				out << "case " << index++ << ": vni::to_string(str_, " << field->name << "); break;" << endl;
			}
			out << "default: str_ << \"{}\";" << endl;
			out << "$}" << endl << "$}" << endl << endl;
			
			out << "void " << scope << "set_field(int index_, vnl::io::ByteInput& in_) {@" << endl;
			out << "switch(index_) {@" << endl;
			index = 0;
			for(Field* field : all_fields) {
				out << "case " << index++ << ": vni::from_string(in_, " << field->name << "); break;" << endl;
			}
			out << "default: break;" << endl;
			out << "$}" << endl << "$}" << endl << endl;
		}
		
		out << endl << endl;
		namespace_end();
		if(p_iface) {
			out << endl << "#endif // " << guard_sym;
		}
	}
	
	bool is_base = false;
	vector<string> name_space;
	string base_name;
	string type_name;
	
	ostringstream out;
	
};










}}}

#endif /* INCLUDE_CPP_GENERATOR_H_ */
